% !Mode:: "TeX:UTF-8"
%
%The bibitems are sorted by pulication date and AUTHOR name.
%

@article{LEDA,
author = {Mehlhorn, Kurt and N\"{a}her, Stefan},
title = {LEDA: a platform for combinatorial and geometric computing},
year = {1995},
issue_date = {Jan. 1995},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {38},
number = {1},
issn = {0001-0782},
abstract = {Combinatorial and geometric computing is a core area of computer science (CS). In fact, most CS curricula contain a course in data structures and algorithms. The area deals with objects such as graphs, sequences, dictionaries, trees, shortest paths, flows, matchings, points, segments, lines, convex hulls, and Voronoi diagrams and forms the basis for application areas such as discrete optimization, scheduling, traffic control, CAD, and graphics. There is no standard library of the data structures and algorithms of combinatorial and geometric computing. This is in sharp contrast to many other areas of computing. There are, for example, packages in statistics (SPSS), numerical analysis (LINPACK, EISPACK), symbolic computation (MAPLE, MATHEMATICA), and linear programming (CPLEX).},
journal = {Commun. ACM},
month = jan,
pages = {96â€“102},
numpages = {7}
}

@INPROCEEDINGS{NetworkX,
  title      = "Exploring network structure, dynamics, and function using
                {NetworkX}",
  booktitle  = "Proceedings of the Python in Science Conference",
  author     = "Hagberg, Aric A and Schult, Daniel A and Swart, Pieter J",
  abstract   = "NetworkX is a Python language package for exploration and
                analysis of networks and network algorithms. The core package
                provides data structures for representing many types of
                networks, or graphs, including simple graphs, directed graphs,
                and graphs with parallel edges and self-loops. The nodes in
                NetworkX graphs can be any (hashable) Python object and edges
                can contain arbitrary data; this flexibility makes NetworkX
                ideal for representing networks found in many different
                scientific fields. In addition to the basic data structures
                many graph algorithms are implemented for calculating network
                properties and structure measures: shortest paths, betweenness
                centrality, clustering, and degree distribution and many more.
                NetworkX can read and write various graph formats for easy
                exchange with existing data, and provides generators for many
                classic graphs and popular graph models, such as the
                Erdos-Renyi, Small World, and Barabasi-Albert models. The
                ease-of-use and flexibility of the Python programming language
                together with connection to the SciPy tools make NetworkX a
                powerful tool for scientific computations. We discuss some of
                our recent work studying synchronization of coupled oscillators
                to demonstrate how NetworkX enables research in the field of
                computational networks.",
  publisher  = "SciPy",
  pages      = "11--15",
  month      =  jun,
  year       =  2008,
  copyright  = "https://creativecommons.org/licenses/by/3.0/",
  conference = "Python in Science Conference",
  location   = "Pasadena, California"
}

